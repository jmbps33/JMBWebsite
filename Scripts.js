/**
 * Jorenz Melo Balbuena Studio Production, Inc. - Enhanced JavaScript
 * Generated by HTML Auto Generator Pro
 * 
 * This file contains modern JavaScript functionality
 * with ES6+ features and best practices.
 */

'use strict';

// Application state management
const AppState = {
    isLoaded: false,
    currentSection: 'home',
    theme: localStorage.getItem('theme') || 'light',
    preferences: JSON.parse(localStorage.getItem('preferences')) || {}
};

// Main application class
class JorenzMeloBalbuenaStudioProduction,Inc.App {
    constructor() {
        this.init();
    }

    async init() {
        try {
            await this.loadComponents();
            this.setupEventListeners();
            this.initializeAnimations();
            AppState.isLoaded = true;
            console.log('Jorenz Melo Balbuena Studio Production, Inc. initialized successfully!');
        } catch (error) {
            console.error('Error initializing application:', error);
        }
    }

    async loadComponents() {
        return new Promise((resolve) => {
            // Simulate component loading
            setTimeout(() => {
                this.updateLoadingProgress(100);
                resolve();
            }, 1000);
        });
    }

    setupEventListeners() {
        // Navigation event listeners
        const navLinks = document.querySelectorAll('.nav-links a');
        navLinks.forEach(link => {
            link.addEventListener('click', this.handleNavigation.bind(this));
        });

        // Button event listeners
        const buttons = document.querySelectorAll('.btn');
        buttons.forEach(button => {
            button.addEventListener('click', this.handleButtonClick.bind(this));
        });

        // Form event listeners
        const forms = document.querySelectorAll('form');
        forms.forEach(form => {
            form.addEventListener('submit', this.handleFormSubmit.bind(this));
        });

        // Window event listeners
        window.addEventListener('scroll', this.handleScroll.bind(this));
        window.addEventListener('resize', this.handleResize.bind(this));
    }

    handleNavigation(event) {
        event.preventDefault();
        const targetId = event.target.getAttribute('href')?.substring(1);
        
        if (targetId) {
            this.scrollToSection(targetId);
            this.updateActiveNavLink(event.target);
            AppState.currentSection = targetId;
        }
    }

    handleButtonClick(event) {
        const button = event.target;
        this.animateButton(button);
        
        // Add your button-specific logic here
        if (button.classList.contains('btn-primary')) {
            this.showNotification('Action completed successfully!', 'success');
        }
    }

    handleFormSubmit(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);
        
        // Validate form
        if (this.validateForm(form)) {
            this.submitForm(formData);
        } else {
            this.showNotification('Please fill in all required fields', 'error');
        }
    }

    validateForm(form) {
        const requiredFields = form.querySelectorAll('[required]');
        let isValid = true;
        
        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                field.classList.add('error');
                isValid = false;
            } else {
                field.classList.remove('error');
            }
        });
        
        return isValid;
    }

    async submitForm(formData) {
        try {
            // Simulate form submission
            const response = await this.mockApiCall(formData);
            this.showNotification('Form submitted successfully!', 'success');
        } catch (error) {
            this.showNotification('Error submitting form', 'error');
            console.error('Form submission error:', error);
        }
    }

    scrollToSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            section.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    }

    updateActiveNavLink(activeLink) {
        document.querySelectorAll('.nav-links a').forEach(link => {
            link.classList.remove('active');
        });
        activeLink.classList.add('active');
    }

    handleScroll() {
        const scrollTop = window.pageYOffset;
        const sections = document.querySelectorAll('section[id]');
        
        sections.forEach(section => {
            const sectionTop = section.offsetTop - 100;
            const sectionHeight = section.offsetHeight;
            const sectionId = section.getAttribute('id');
            
            if (scrollTop >= sectionTop && scrollTop < sectionTop + sectionHeight) {
                const activeLink = document.querySelector(`a[href="#${sectionId}"]`);
                if (activeLink) {
                    this.updateActiveNavLink(activeLink);
                }
            }
        });
    }

    handleResize() {
        // Handle responsive behavior
        const isMobile = window.innerWidth <= 768;
        document.body.classList.toggle('mobile', isMobile);
    }

    initializeAnimations() {
        // Intersection Observer for scroll animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('fade-in-up');
                }
            });
        }, observerOptions);

        // Observe all animatable elements
        document.querySelectorAll('.card, .hero, section').forEach(el => {
            observer.observe(el);
        });
    }

    animateButton(button) {
        button.style.transform = 'scale(0.95)';
        setTimeout(() => {
            button.style.transform = 'scale(1)';
        }, 150);
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-message">${message}</span>
                <button class="notification-close">&times;</button>
            </div>
        `;

        // Add notification styles
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            padding: '1rem 1.5rem',
            borderRadius: '8px',
            color: 'white',
            zIndex: '10000',
            animation: 'slideInRight 0.3s ease',
            backgroundColor: type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'
        });

        document.body.appendChild(notification);

        // Auto remove
        setTimeout(() => {
            notification.remove();
        }, 5000);

        // Manual close
        notification.querySelector('.notification-close').addEventListener('click', () => {
            notification.remove();
        });
    }

    updateLoadingProgress(percent) {
        const progressBar = document.querySelector('.progress-bar');
        if (progressBar) {
            progressBar.style.width = percent + '%';
        }
    }

    async mockApiCall(data) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                // Simulate API response
                Math.random() > 0.1 ? resolve({ success: true }) : reject(new Error('API Error'));
            }, 1000);
        });
    }

    // Utility methods
    saveToLocalStorage(key, value) {
        try {
            localStorage.setItem(key, JSON.stringify(value));
        } catch (error) {
            console.error('Error saving to localStorage:', error);
        }
    }

    getFromLocalStorage(key, defaultValue = null) {
        try {
            const item = localStorage.getItem(key);
            return item ? JSON.parse(item) : defaultValue;
        } catch (error) {
            console.error('Error reading from localStorage:', error);
            return defaultValue;
        }
    }
}

// Utility functions
const Utils = {
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    },

    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    },

    formatDate(date) {
        return new Intl.DateTimeFormat('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        }).format(new Date(date));
    },

    generateId() {
        return Math.random().toString(36).substr(2, 9);
    },

    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
};

// Initialize application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new JorenzMeloBalbuenaStudioProduction,Inc.App();
});

// Export for module systems
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { JorenzMeloBalbuenaStudioProduction,Inc.App, Utils, AppState };
}
